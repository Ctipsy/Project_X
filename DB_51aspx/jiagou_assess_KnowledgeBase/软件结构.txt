    软件结构（Software Architecture）指的是驻留在所在机构的网络上的应用，以及它们的组成。软件结构在安全基础结构中扮演着非常重要的角色，因为网络边界安全的目的就是要保护应用数据和服务。当对应用进行保护时，要确保软件结构和网络是互相协调的。从本质上看，软件结构涉及到应用程序的部件的部署位置及部署方法，在确保可用性和可维护性的同时尽可能地保证安全。
    软件结构的核心问题就是每个应用程序不同部件的部署位置问题，提高软件部件的部署能力可以从以下几个方面入手：
（1）单一系统上的应用程序
     通常情况下的设计都是把一个应用程序和它的关联数据安置在单一系统中，而且不被分割防止在多个主机中。为确保系统可以具有外部用户，可以考虑把系统安置在一个被屏蔽的子网或内部网络中，同时在被屏蔽的子网中为其设置一个代理服务器。
（2）多级应用程序
     通常情况下，在多级应用程序中，最机密的以及是包含数据的那一级，这一级最需要与用户隔离，要避免把包含应用数据的服务器放在可以公开访问的网络中；相反，这一类的服务器应该被安置在专用网络中，并严格限制对它们的访问。包含用户界面的一级是最直接和用户发生关联的一级，这一级应该被安置在一个被屏蔽的子网（紧挨着外部网络）中，或者被设置成智能经过代理防火墙进行访问。在任何情况下，隔离开最顶端的一级（同用户接触的那级）和下面的各级（包含数据和中间件）都是很重要的。通过把各级放置在分离的主机上并且安全地部署每一级，就能极大地降低数据被攻击的风险，或者降低威胁顶端安全时中间代码被获取的可能性。
（3）管理员对系统的访问
     提供几种外部人员访问通道的可选择的方法，这比允许他们经由Internet访问你的内部网络要好。
（4）内部用户使用的应用程序
     内部用户专用的应用程序严禁外部用户访问。“被推动（push）”式更新（即被Internet主机发起建立的连接被迫进行更新）应当把应用程序安置在一个被屏蔽的子网中，从而避免外部主机发起到内部网络的连接。在大部分情况下，“拉起（pull）”式更新（即由初始建立Internet连接的主机发起的更新）要比“被推动”式更新好，因为“拉起”更新的过程中你可以对操作进行控制。如果需要为内部用户进行更新，最好是把“拉起”或“被推动”的更新部分放到网络的一个中间件上，然后用户再和中间件互联。
    参考资料：《深入剖析网络边界安全》（美）诺斯卡特等著